###############################################################################
#
#    Licensed Materials - Property of IBM
#
#    (C) Copyright IBM Corp. 2006
#    All Rights Reserved
#
#    snmptrap.rules 3.4 
#    2006/05/19 Rajyalakshmi Reddy 
#
###############################################################################
#
#        Compatible with:
#
#          -  Netcool/Omnibus 3.x and 7
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#
################################################################################
#
# 3.5 - Added Modularity Feature to NcKL wherein all the snmp related rules
#       files are divided into the subdirectories with respect to each Vendor.
#
#     - Included $vendor.master.include.rules and $vendor.master.include.lookup
#       for each vendor.These master include files will contain all the include
#       files for that particular vendor.And instead of including all the files
#       individually in snmptrap.rules,master.include files for each vendor
#       will be included that will in turn contain the entries of all the files
#       related to that vendor.
#
#       The $vendor.master.include.rules would contain
#       $vendor.include.snmptrap.rules entries.$vendor.master.include.lookup
#       would contain the $vendor.sev.snmptrap.lookup,
#       $vendor.include.snmptrap.lookup and the $vendor.preclass.snmptrap.lookup
#
#     - If the customer doesn't want to include specific vendor files, only 3
#       lines needs to be commented from snmptrap.rules ie , $vendor.master.
#       include.rules, $vendor.master.include.lookup and $vendor.preclass.include.
#       snmptrap.rules.
#
#     - Modified the "severity lookup" files from TAB-delimited format to
#       Double Quotes Seperated Tabular Format.Until NCKL1.4 release,these files
#       were in the TAB-delimited format,which had 3 big disadvantages:
#       - Can't add comments/version numbers/etc.. to the files, as this will
#         generate lots of error messages and warnings in OMNIbus.
#       - Table definitions and defaults have to be inserted in snmptrap.rules
#         which was very cumbersome.
#       - The file is hard to read and maintain,as the tabs were not directly
#         visible in the editor. Difficult to count the number of TABs too.
#
#     - Added AssignCorrectAdvValue.include.snmptrap.rules file for the proper
#       assignment of Advcorr values to the traps.
#
#     - 2007/10/08 Anchala Bansal
#     - 2007/10/08 Aveek Kumar Gupta
#
# 3.4 - Removed Contrib from rules Directory
#
# 3.3 - Added support for a recently discovered Cisco-specific implementation
#       of SNMPv2 linkDown and linkUp Traps.
#
#     - 2006/02/01 Robert Cowart 
#
# 3.2 - Corrected a bug that in some cases caused linkUp generic-traps to have
#       improper values for Severity and Type.
#
# 3.1 - Simplified handling of "Severity via lookup" logic.
#
#     - Added basic debug logging.
#
# 3.0 - Modified to support following features introduced in NCiL 2.0:
#         - "Advanced" and "User" include files
#         - "Severity" lookup tables
#
# 2.4 - Renamed snmptrap.rules to avoid confusion with snmp.rules from the SNMP
#       ISM.
#
#     - Cleaned up various comments.
#
#     - Updated handling of ProbeWatch messages.
#
# 2.3 - Additional enhancements for "Non-Default Field Support".
#
# 2.2 - Added include statement for FixMttrapdOids.include.snmptrap.rules, which
#       recognizes OIDs from newer versions (OMNIbus 3.5 and later) of the
#       MTTrapd Probe and converts them to the format of previous versions.
#       This ensures backward compatibility to existing rules files.
#
#       NOTE: The long-term plan is to update all existing rules file, where
#       necessary, for compatibility with the newer versions of MTTrapd which
#       in fact represents OIDs correctly as outlined in various RFCs.
#
#     - Enhanced for "Non-Default Field Support".
#
#     - Added logic to correct confusing values of locIfReason sent by Cisco
#       generic traps.
#
# 2.1 - Modified to recognize $enterprise as formed by the MTTrapd Probe from
#       the version provided with OMNIbus 3.5 (Unix).
#
#     - Added logic to detect and alert user that the MIBFile and QuietOutput
#       properties are improperly set.
#
# 2.0 - Modified the conversion of SNMPv2 trap OIDs to SNMPv1 enterprises in
#       order to ensure compliancy with RFC2576 - "Coexistence between Version
#       1, Version 2, and Version 3 of the Internet-standard Network Management
#       Framework"
#     
#     - Modified setting of NodeAlias to properly handle tokens from NNM/NV
#       and Trapd/MTTrapd Probes.
#
#     - Completely rewrote the handling of generic traps (again!).
#
###############################################################################

# declare the loads array
array loads;
array EventCount
array NodeLoads
array SplitArray

table snmptrapCorrScore = "$NC_RULES_HOME/include-snmptrap/CorrScore.snmptrap.lookup"
default = "Unknown"

table syslogCorrScore = "$NC_RULES_HOME/include-syslog/CorrScore.syslog.lookup"
default = "Unknown"
table syslogPreClass = "$NC_RULES_HOME/include-syslog/PreClass.syslog.lookup"
default = "Unknown"

table ciscoIosDefaults = "$NC_RULES_HOME/include-syslog/cisco-ios/cisco-ios-defaults.syslog.lookup"
default = {"Unknown","Unknown"}

table cisco-ios_sev = "$NC_RULES_HOME/include-syslog/cisco-ios.sev.syslog.lookup"
default = {"Unknown","Unknown","Unknown"}

################################################################################
# Enter lookup table Includes below with the following syntax:
#
# include "<$NCHOME>/etc/rules/include-snmptrap/<vendor>/<vendor>.master.include
# .lookup"
################################################################################

include "$NC_RULES_HOME/include-common/ascii.include.common.lookup"
include "$NC_RULES_HOME/include-common/hex.include.common.lookup"
include "$NC_RULES_HOME/include-common/IANA.include.common.lookup"
include "$NC_RULES_HOME/include-common/IANA-PppNumberAssignments.include.common.lookup"
include "$NC_RULES_HOME/include-common/IANA-ProtocolNumbers.include.common.lookup"

#include "$NC_RULES_HOME/include-snmptrap/adtran/adtran.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/adva/adva.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/alliedtelesyn/alliedtelesyn.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/ascend/ascend.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/ATMF/ATMF.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/bridgewater/bridgewater.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/chipcom/chipcom.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/ciena/ciena.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/cisco/cisco.master.include.lookup"
include "$NC_RULES_HOME/include-snmptrap/common-lookup/common.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/empirix/empirix.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/enterasys/enterasys.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/fore/fore.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/foundry/foundry.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/huawei/huawei.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/IANA/IANA.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/ibm/ibm.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/IEEE/IEEE.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/IETF/IETF.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/juniper/juniper.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/latitude/latitude.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/networkharmoni/networkharmoni.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/nortel/nortel.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/ntntech/ntntech.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/rapidcity/rapidcity.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/shasta/shasta.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/stratacom/stratacom.master.include.lookup"
#include "$NC_RULES_HOME/include-snmptrap/synoptics/synoptics.master.include.lookup"

##nec lookup table added by FF Innovise ESM 26.03.10##
include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-UNIXPNMS-PASOCOMMON--MIB-UNIXPNMS-SYSTEM1.sev.snmptrap.lookup"

##siemens include lookup added by Chris Janes Innovise 20100412##
include "$NC_RULES_HOME/include-snmptrap/siemens/siemens.include.lookup"
include "$NC_RULES_HOME/include-snmptrap/siemens/cmg_smsc.lookup"

###############################################################################
# End of lookup table Includes
###############################################################################

###############################################################################
# Enter "Severity" lookup tables below with the following syntax:
#
# include "<$NCHOME>/etc/rules/include-snmptrap/<lookuptable>.include.snmptrap
# .lookup"
###############################################################################

include "$NC_RULES_HOME/snmptrap.sev.lookup"

###############################################################################
# End of "Severity" lookup table Includes
###############################################################################

if(match(@Manager, "ProbeWatch"))
{
    $ProbeName = @Agent
    $ProbeStatus = @Summary
    
    @Agent = "Micromuse-ProbeWatch"
    
    @Node = hostname()
    
    @AlertGroup = "Probe Status"
    @AlertKey = "Probe: " + $ProbeName + ", Host: " + hostname() + ", ObjectServer: " + @ServerName
    @Summary = "Probe " + $ProbeStatus + "  ( " + @AlertKey + " )"
    switch($ProbeStatus)
    {
        case "Running ...":
            @Severity = 1
            @Type = 2
        case "Going Down ...":
            @Severity = 5
            @Type = 1
        default:
            @Severity = 2
            @Type = 1
    }
    @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $ProbeStatus
}
else
{
    
    log(DEBUG, "<<<<< Entering... snmptrap.rules >>>>>")
    
    ###########################################################################
    # Set default Manager, Agent, and Class by uncommenting one of each of the
    # following choices.
    ###########################################################################
    
    # @Manager = "Trapd Probe on " + hostname()
    # @Agent = "trapd"
    # @Class = "300"
    @Manager = "MTTrapd Probe on " + hostname()
    @Agent = "mttrapd"
    @Class = "300"
    # @Manager = "HP OpenView NNM on " + hostname()
    # @Agent = "nnm"
    # @Class = "400"
    # @Manager = "IBM NetView on " + hostname()
    # @Agent = "nv5"
    # @Class = "700"
    
    ###########################################################################
    # End of default Manager, Agent, and Class
    ###########################################################################
    
    include "$NC_RULES_HOME/include-snmptrap/FixMttrapdOids.include.snmptrap.rules"
    
    $OPTION_StateBasedCorr = "0"
    
    ##########
    # Check if an SNMPv2 trap and convert to SNMPv1 style tokens
    ##########
    
    if(exists($notify)) ### if $notify exists then this is an SNMPv2 trap
    {
        @Node = $PeerAddress
        @NodeAlias = $PeerIPaddress
                
        ##########
        # Remove the artifacts of SNMP library being 'helpful'. We'll only
        # remove the first .iso., everything else should be just plain numbers.
        # With the mttrapd probe, this has to be done by specifying the
        # following property in the probe's properties file:
        #   MIBFile : /dev/null
        #
        # NOTE: When using the mttrapd probe from OMNIbus 3.5 or later it is
        # also necessary to us "Quiet Output".  This is done by setting the
        # following property in the probe's properties file:
        #   QuietOutput : 1
        ##########
    
        if(regmatch($notify, "^enterprises\..*"))
        {
            $MIBFileNotNull = 1
            $notify = ".1.3.6.1.4.1." + extract($notify, "^enterprises\.(.*)")
        }
        else if(regmatch($notify, "\.iso\." ))
        {
            $notify = ".1." + extract($notify, "\.iso\.(.*)")
        }
    
        if (nmatch($notify, ".1.3.6.1.6.3.1.1.5")) ### Trap is an SNMPv2 Generic Trap
        {
            $enterprise = extract($notify, "(.*)\.[0-9]+$")
            $specific-trap = "0"
            $generic-trap = int(extract($notify, ".*\.([0-9]+)$"))-1
        }
        else ### Trap is Enterprise Specific
        {
            if(match(extract($notify, "\.([0-9]+)\.[0-9]+$"), "0"))
            {
                $enterprise = extract($notify, "(.*)\.[0-9]+\.[0-9]+$")
            }
            else
            {
                $enterprise = extract($notify, "(.*)\.[0-9]+$")
            }
            $specific-trap = extract($notify, ".*\.([0-9]+)$")
            $generic-trap = "6"
        }
    }
    else ### This is an SNMPv1 Trap
    {
        @Node = $Node
        if(exists($IPAddress)) ### Trap is from NNM or NV Probe
        {
            $IPaddress = $IPAddress
        }
        @NodeAlias = $IPaddress
        if(regmatch($enterprise, "^iso\..*"))
        {
            $NoQuietOutput = 1
            $enterprise = ".1." + extract($enterprise, "iso\.(.*)")
        }
    }
    
    $OS_LocalNodeAlias = @NodeAlias
    
    ##########
    # End of SNMPv2 to SNMPv1 conversion
    ##########
    
    if(match($generic-trap, "6")) ### (Enterprise Specific Trap)
    {
        log(DEBUG, "<<<<< (snmptrap.rules) Event is an enterprise-specific trap. >>>>>")
        
        switch($enterprise)
        {
            case "dummy case statement": ### This will prevent syntax errors in case no includes are added below.
            
            ################################################################################
            # Enter rules file Includes below with the following syntax:
            #
            # include "<$NCHOME>/etc/rules/include-snmptrap/<vendor>/<vendor>.master.include
            # .rules"
            ################################################################################


      #      include "$NC_RULES_HOME/include-snmptrap/adtran/adtran.master.include.rules"
	  #  include "$NC_RULES_HOME/include-snmptrap/adva/adva.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/alliedtelesyn/alliedtelesyn.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/ascend/ascend.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/ATMF/ATMF.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/bridgewater/bridgewater.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/chipcom/chipcom.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/ciena/ciena.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/cisco/cisco.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/empirix/empirix.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/enterasys/enterasys.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/fore/fore.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/foundry/foundry.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/huawei/huawei.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/IANA/IANA.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/ibm/ibm.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/IEEE/IEEE.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/IETF/IETF.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/juniper/juniper.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/latitude/latitude.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/networkharmoni/networkharmoni.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/nortel/nortel.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/ntntech/ntntech.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/rapidcity/rapidcity.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/shasta/shasta.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/stratacom/stratacom.master.include.rules"
      #      include "$NC_RULES_HOME/include-snmptrap/synoptics/synoptics.master.include.rules"
            
            ##nec include rules added by FF Innovise 25.03.10##
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-UNIXPNMS-PASOCOMMON--MIB-UNIXPNMS-SYSTEM1.include.snmptrap.rules"

            ##Further nec include rules added by Chris Janes Innovise 20100413
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMSJ-PASOLINK-NEO-STD.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMSJ-PASOLINK-NEO-CPV.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMSJ-PASOLINKPLUS-MX.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMSJ-PASOLINKPLUS-STM1.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMSJ-PASOLINK-V4.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/nec/nec-MIB-PNMS.include.rules"
            
            
            ##smsc include rules added by Chris Janes Innovise 20100407##
            include "$NC_RULES_HOME/include-snmptrap/siemens/cmg_smsc.include.rules"
            include "$NC_RULES_HOME/include-snmptrap/siemens/cmg_opcom.include.rules"

            ##siemens include rules added by Chris Janes Innovise 20100412##
            include "$NC_RULES_HOME/include-snmptrap/siemens/siemens.include.rules"
            
            
            ###################################################################
            # End of rules file Includes
            ###################################################################
               
            default:
                
                log(DEBUG, "<<<<< (snmptrap.rules) Enterprise ID not found, checking ncotdc include files. >>>>>")
                
                $EventID = $enterprise + "|" + $generic-trap + "|" + $specific-trap
                  
                switch($EventID)
                {
                    case "dummy case statement": ### This will prevent syntax errors in case no includes are added below.
                    
                    ###########################################################
                    # Enter "nco_tdc" Includes below with the following syntax:
                    #
                    # include "<$NCHOME>/etc/rules/include-snmptrap/ncotdc/
                    # <rulesfile>.ncotdc.include.rules"
                    ###########################################################
        
                    

                    ###########################################################
                    # End of "nco_tdc" Includes
                    ###########################################################
                
                    default:
                        
                        log(DEBUG, "<<<<< (snmptrap.rules) Enterprise ID not found in any include file. >>>>>")
                        
                        @Summary = "No Rules Found for Enterprise ID: " + $enterprise + " (see details)"
                        @URL = "ST = " + $specific-trap + " 1= " + $1 + " 2= " + $2 + " 3= " + $3 + " 4= " + $4 + " 5= " + $5 + " 6= " + $6

                        @Severity = 2
                        @Type = 0
                        details($*)
                }
                
                @Identifier = @Node + " " + $enterprise + " " + $generic-trap + " " + $specific-trap + " " + @AlertGroup + " " + @AlertKey + " " + @Agent + " " + @Manager
        }
    }
    else ### Check the Generic Traps
    {
        log(DEBUG, "<<<<< (snmptrap.rules) Event is a generic trap. >>>>>")
        
        $OPTION_TypeFieldUsage = "3.6"
        
        ##########
        # Generic Trap Defaults
        ##########
        
        @Agent = "Generic"
        
        switch($generic-trap)
        {
            case "0": ### coldStart
            
                ##########
                # A coldStart trap signifies that the sending protocol entity
                # is reinitializing itself such that the agent's configuration
                # or the protocol entity implementation may be altered.
                ##########
                
                $OS_EventId = "SNMPTRAP-coldStart"
                
                @AlertGroup = "Generic"
                @AlertKey = ""
                @Summary = "Cold Start"
                
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 13
                $DEFAULT_ExpireTime = 1800
                
                @Identifier = @Node + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            case "1": ### warmStart
            
                ##########
                # A warmStart trap signifies that the sending protocol entity
                # is reinitializing itself such that neither the agent
                # configuration nor the protocol entity implementation is
                # altered.
                ##########
                
                $OS_EventId = "SNMPTRAP-warmStart"
                
                @AlertGroup = "Generic"
                @AlertKey = ""
                @Summary = "Warm Start"
                
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 13
                $DEFAULT_ExpireTime = 1800
                
                @Identifier = @Node + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            case "2": ### linkDown
            
                ##########
                # A linkDown trap signifies that the sending protocol entity
                # recognizes a failure in one of the communication links
                # represented in the agent's configuration.
                #
                # $1 = ifIndex - A unique value for each interface. Its value
                #        ranges between 1 and the value of ifNumber. The value
                #        for each interface must remain constant at least from
                #        one re-initialization of the entity's network
                #        management system to the next re-initialization.
                ##########
                
                $ifIndex = $1
                details($ifIndex)
                
                $OS_EventId = "SNMPTRAP-linkDown"
                
                @AlertGroup = "Generic Link Status"
                @AlertKey = "ifEntry." + $1
                @Summary = "Link Down"
                
                $DEFAULT_Severity = 4
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0
                
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            case "3": ### linkUp
            
                ##########
                # A linkUp trap signifies that the sending protocol entity
                # recognizes that one of the communication links represented in
                # the agent's configuration has come up.
                #
                # $1 = ifIndex - A unique value for each interface. Its value
                #        ranges between 1 and the value of ifNumber. The value
                #        for each interface must remain constant at least from
                #        one re-initialization of the entity's network
                #        management system to the next re-initialization.
                ##########
                
                $ifIndex = $1
                details($ifIndex)
                
                $OS_EventId = "SNMPTRAP-linkUp"
                
                @AlertGroup = "Generic Link Status"
                @AlertKey = "ifEntry." + $1
                @Summary = "Link Up"
                
                $DEFAULT_Severity = 1
                $DEFAULT_Type = 2
                $DEFAULT_ExpireTime = 0
                
                @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            case "4": ### authenticationFailure
            
                ##########
                # An authenticationFailure trap signifies that the sending
                # protocol entity is the addressee of a protocol message that
                # is not properly authenticated. While implementations of the
                # SNMP must be capable of generating this trap, they must also
                # be capable of suppressing the emission of such traps via an
                # implementation-specific mechanism.
                ##########
                
                $OS_EventId = "SNMPTRAP-authenticationFailure"
                
                @AlertGroup = "Generic Authentication"
                @AlertKey = ""
                @Summary = "Authentication Failure"
                
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0
                
                @Identifier = @Node + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            case "5": ### egpNeighborLoss
            
                ##########
                # An egpNeighborLoss trap signifies that an EGP neighbor for
                # whom the sending protocol entity was an EGP peer has been
                # marked down and the peer relationship no longer obtains.
                ##########
                
                $OS_EventId = "SNMPTRAP-egpNeighborLoss"
                
                @AlertGroup = "EGP Neighbor Status"
                @AlertKey = ""
                @Summary = "EGP Neighbor Loss"
                
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0
                
                @Identifier = @Node + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager + " " + $generic-trap
                        
            default:
            
                @Summary = "Invalid Generic Trap Number, see Details ( Enterprise: " + $enterprise + ", Generic #: " + $generic-trap + ", Specific #: " + $specific-trap + " " + " )"
                @Severity = 2
                @Type = 0
                @Identifier = @Node + " " + $enterprise + " " + $generic-trap + " " + $specific-trap + " " + @Agent + " " + @Manager
                details($*)
        }
        
        ##########
        # End of Generic Trap Defaults
        ##########
        
        switch($enterprise)
        {
            case ".1.3.6.1.6.3.1.1.5": ### RFC1907 - SNMPv2-MIB
                
                if(nmatch($OID1, "1.3.6.1.4.1.9.")||nmatch($OID2, "1.3.6.1.4.1.9.")||nmatch($OID4, "1.3.6.1.4.1.9."))
                {
                    log(DEBUG, "<<<<< (snmptrap.rules) Event is a Cisco SNMPv2 generic trap. >>>>>")
                    
                    @Agent = "Generic-Cisco SNMPv2"
                    @Class = "40057"
                
                    switch($generic-trap)
                    {
                        case "0"|"1": ### coldStart, warmStart
                            
                            ##########
                            # $1 = sysUpTime - The time (in hundredths of a
                            #        second) since the network management
                            #        portion of the system was last
                            #        re-initialized.
                            # $2 = whyReload - This variable contains a
                            #        printable octet string which contains the
                            #        reason why the system was last restarted.
                            ##########
        
                            $sysUptime = $1
                            $whyReload = $2
                            details($sysUptime,$whyReload)
                            
                            @Summary = @Summary + ": " + $2
                            @Identifier = @Identifier + " " + $2
                        
                        case "2"|"3": ### linkDown, linkUp
                            
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.                
                            # $2 = ifDescr - A textual string containing
                            #        information about the interface.  This
                            #        string should include the name of the
                            #        manufacturer, the product name and the
                            #        version of the hardware interface.
                            # $3 = ifType - The type of interface,
                            #        distinguished according to the
                            #        physical/link protocol(s) immediately
                            #        `below' the network layer in the protocol
                            #        stack.
                            # $4 = locIfReason - Reason for interface last
                            #        status change.
                            ##########
                            
                            #if(match($generic-trap, "2") && match($4, "up"))
                            #{
                            #    $4 = "down"
                            #}
                            #else if(match($generic-trap, "3") && match($4, "down"))
                            #{
                            #    $4 = "up"
                            #}
                            
                            $ifIndex = $1
                            $ifDescr = $2
                            $ifType = lookup($3, IANAifType) + " ( " + $3 + " )"
                            $locIfReason = $4
                            details($ifIndex,$ifDescr,$ifType,$locIfReason)
                
                            @Summary = @Summary + ": " + $4 + "  ( " + $2 + " )"
                            @Identifier = @Identifier + " " + $4
                        
                        case "4": ### authenticationFailure
                            
                            ##########
                            # $1 = authAddr - This variable contains the last
                            #        SNMP authorization failure IP address.
                            ##########
                            
                            $authAddr = $1
                            details($authAddr)
                            
                            @AlertKey = $1
                            @Summary = @Summary + "  ( From: " + $1 + " )"
                            @Identifier = @Identifier + " " + $1
                       
                        case "5": ### egpNeighborLoss
                        
                            ##########
                            # $1 = egpNeighAddr - The IP address of this
                            #        entry's EGP neighbor.
                            ###########
                            
                            $egpNeighAddr = $1
                            details($egpNeighAddr)
                            
                            @AlertKey = $1
                            @Summary = @Summary + "  ( Neighbor: " + $1 + " )"
                            @Identifier = @Identifier + " " + $1
                        
                        default:
                    }
                }
                else if(nmatch($OID6, "1.3.6.1.4.1.9."))
                {
                    log(DEBUG, "<<<<< (snmptrap.rules) Event is a Cisco SNMPv2 generic trap. >>>>>")
                    
                    @Agent = "Generic-Cisco SNMPv2"
                    @Class = "40057"
                
                    switch($generic-trap)
                    {
                        case "2"|"3": ### linkDown, linkUp
                            
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.                
                            # $2 = ifAdminStatus - The desired state of the
                            #        interface.  The testing(3) state indicates
                            #        that no operational packets can be passed.
                            # $3 = ifOperStatus - The current operational state
                            #        of the interface. The testing(3) state
                            #        indicates that no operational packets can
                            #        be passed.
                            # $4 = ifDescr - A textual string containing
                            #        information about the interface. This
                            #        string should include the name of the
                            #        manufacturer, the product name and the
                            #        version of the interface
                            #        hardware/software.
                            # $5 = ifType - The type of interface. Additional
                            #        values for ifType are assigned by the
                            #        Internet Assigned Numbers Authority
                            #        (IANA), through updating the syntax of the
                            #        IANAifType textual convention.
                            # $6 = locIfReason - Reason for interface last
                            #        status change.
                            ##########
                            
                            if(regmatch($2, "^.*[A-Za-z].*$")||regmatch($3, "^.*[A-Za-z].*$")||regmatch($5, "^.*[A-Za-z].*$"))
                            {
                                $MIBFileNotNull = 1
                            }
                            
                            $ifIndex = $1                
                            $ifAdminStatus = lookup($2, ifAdminStatus) + " ( " + $2 + " )"
                            $ifOperStatus = lookup ($3, ifOperStatus) + " ( " + $3 + " )"
                            $ifDescr = $4
                            $ifType = lookup($5, IANAifType) + " ( " + $5 + " )"
                            $locIfReason = $6
                            details($ifIndex,$ifAdminStatus,$ifOperStatus,$ifDescr,$ifType,$locIfReason)
                            
                            switch($2)
                            {
                                case "2": ### Down
                                    @Summary = @Summary + ", Administratively: " + $6 + "  ( " + $4 + " )"
                
                                    $SEV_KEY = $OS_EventId + "_adminDown"
                                    $DEFAULT_Severity = 2
                                    $DEFAULT_Type = 1
                                    $DEFAULT_ExpireTime = 0

                                case "3": ### Testing - in some test mode
                                    @Summary = @Summary + ", Testing: " + $6 + "  ( " + $4 + " )"
                                    
                                    $SEV_KEY = $OS_EventId + "_adminTesting"
                                    $DEFAULT_Severity = 2
                                    $DEFAULT_Type = 1
                                    $DEFAULT_ExpireTime = 0

                                default:
                                    @Summary = @Summary + ": " + $6 + "  ( " + $4 + " )"
                                    
                                    $SEV_KEY = $OS_EventId + "_adminUp"
                                    $DEFAULT_Severity = 4
                                    $DEFAULT_Type = 1
                                    $DEFAULT_ExpireTime = 0
                            }
                            @Identifier = @Identifier + " " + $2 + " " + $3 + " " + $6
                            
                            if(match($generic-trap, "3"))
                            {
                                $DEFAULT_Severity = 1
                                $DEFAULT_Type = 2
                                $DEFAULT_ExpireTime = 0
                            }
                        
                        default:
                    }
                }
                else if(nmatch($OID1, "1.3.6.1.2.1.2.2.1.1.")&&nmatch($OID2, "1.3.6.1.2.1.2.2.1.2.")&&nmatch($OID3, "1.3.6.1.2.1.2.2.1.3."))
                {
                    log(DEBUG, "<<<<< (snmptrap.rules) Event is a Cisco SNMPv2 generic trap. >>>>>")
                    
                    @Agent = "Generic-Cisco SNMPv2"
                    @Class = "40057"
                
                    switch($generic-trap)
                    {
                        case "2"|"3": ### linkDown, linkUp
                            
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.                
                            # $2 = ifDescr - A textual string containing
                            #        information about the interface. This
                            #        string should include the name of the
                            #        manufacturer, the product name and the
                            #        version of the interface
                            #        hardware/software.
                            # $3 = ifType - The type of interface. Additional
                            #        values for ifType are assigned by the
                            #        Internet Assigned Numbers Authority
                            #        (IANA), through updating the syntax of the
                            #        IANAifType textual convention.
                            ##########
                            
                            if(regmatch($3, "^.*[A-Za-z].*$"))
                            {
                                $MIBFileNotNull = 1
                            }
                            
                            $ifIndex = $1                
                            $ifDescr = $2
                            $ifType = lookup($3, IANAifType) + " ( " + $3 + " )"
                            details($ifIndex,$ifDescr,$ifType)
                            
                            @Summary = @Summary + "  ( " + $2 + " )"
                        
                        default:
                    }
                }
                else
                {
                    log(DEBUG, "<<<<< (snmptrap.rules) Event is an SNMPv2 generic trap. >>>>>")
                    
                    @Agent = "Generic-IETF-SNMPv2-MIB"
                
                    switch ($generic-trap)
                    {
                        case "2"|"3": ### linkDown, linkUp
                            
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.                
                            # $2 = ifAdminStatus - The desired state of the
                            #        interface.  The testing(3) state indicates
                            #        that no operational packets can be passed.
                            # $3 = ifOperStatus - The current operational state
                            #        of the interface. The testing(3) state
                            #        indicates that no operational packets can
                            #        be passed.
                            #
                            # Optional:
                            #
                            # $4 = ifName - The textual name of the interface.
                            #        The value of this object should be the
                            #        name of the interface as assigned by the
                            #        local device and should be suitable for
                            #        use in commands entered at the device's
                            #        `console'. This might be a text name, such
                            #        as `le0' or a simple port number, such as
                            #        `1', depending on the interface naming
                            #        syntax of the device. If several entries
                            #        in the ifTable together represent a single
                            #        interface as named by the device, then
                            #        each will have the same value of ifName.
                            #        Note that for an agent which responds to
                            #        SNMP queries concerning an interface on
                            #        some other (proxied) device, then the
                            #        value of ifName for such an interface is
                            #        the proxied device's local name for it. If
                            #        there is no local name, or this object is
                            #        otherwise not applicable, then this object
                            #        contains a zero-length string.
                            #
                            # Or:
                            #
                            # $4 = ifDescr - A textual string containing
                            #        information about the interface. This
                            #        string should include the name of the
                            #        manufacturer, the product name and the
                            #        version of the interface
                            #        hardware/software.
                            ##########
                            
                            if(regmatch($2, "^.*[A-Za-z].*$")||regmatch($3, "^.*[A-Za-z].*$"))
                            {
                                $MIBFileNotNull = 1
                            }
                            
                            if(nmatch($OID4, "1.3.6.1.2.1.31.1.1.1.1"))
                            {
                                $ifIndex = $1
                                $ifAdminStatus = lookup($2, ifAdminStatus) + " ( " + $2 + " )"
                                $ifOperStatus = lookup ($3, ifOperStatus) + " ( " + $3 + " )"
                                $ifName = $4
                                details($ifIndex,$ifAdminStatus,$ifOperStatus,$ifName)
                                
                                switch($2)
                                {
                                    case "2": ### Down
                                        @Summary = @Summary + ", Administratively  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminDown"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    case "3": ### Testing - in some test mode
                                        @Summary = @Summary + ", Testing  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminTesting"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    default:
                                        @Summary = @Summary + "  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminUp"
                                        $DEFAULT_Severity = 4
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0
                                }
                            }
                            else if(nmatch($OID4, "1.3.6.1.2.1.2.2.1.2"))
                            {
                                $ifIndex = $1
                                $ifAdminStatus = lookup($2, ifAdminStatus) + " ( " + $2 + " )"
                                $ifOperStatus = lookup ($3, ifOperStatus) + " ( " + $3 + " )"
                                $ifDescr = $4
                                details($ifIndex,$ifAdminStatus,$ifOperStatus,$ifDescr)
                                
                                switch($2)
                                {
                                    case "2": ### Down
                                        @Summary = @Summary + ", Administratively  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminDown"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    case "3": ### Testing - in some test mode
                                        @Summary = @Summary + ", Testing  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminTesting"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    default:
                                        @Summary = @Summary + "  ( " + $4 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminUp"
                                        $DEFAULT_Severity = 4
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0
                                }
                            }
                            else
                            {
                                $ifIndex = $1
                                $ifAdminStatus = lookup($2, ifAdminStatus) + " ( " + $2 + " )"
                                $ifOperStatus = lookup ($3, ifOperStatus) + " ( " + $3 + " )"
                                details($ifIndex,$ifAdminStatus,$ifOperStatus)
                                
                                switch($2)
                                {
                                    case "2": ### Down
                                        @Summary = @Summary + ", Administratively  ( ifEntry." + $1 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminDown"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    case "3": ### Testing - in some test mode
                                        @Summary = @Summary + ", Testing  ( ifEntry." + $1 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminTesting"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                    default:
                                        @Summary = @Summary + "  ( ifEntry." + $1 + " )"
                                        
                                        $SEV_KEY = $OS_EventId + "_adminUp"
                                        $DEFAULT_Severity = 4
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0
                                }
                            }
                            
                            if(match($generic-trap, "3"))
                            {
                                $DEFAULT_Severity = 1
                                $DEFAULT_Type = 2
                                $DEFAULT_ExpireTime = 0
                            }
                            
                            @Identifier = @Identifier + " " + $2 + " " + $3
                        
                        case "5": ### egpNeighborLoss
                        
                            ##########
                            # $1 = egpNeighAddr - The IP address of this
                            #        entry's EGP neighbor.
                            ###########
                            
                            $egpNeighAddr = $1
                            details($egpNeighAddr)
                            
                            @AlertKey = $1
                            @Summary = @Summary + "  ( Neighbor: " + $1 + " )"
                            @Identifier = @Identifier + " " + $1
                        
                        default:
                    }
                }
            
            case ".1.3.6.1.2.1.11": ### RFC1215
            
                log(DEBUG, "<<<<< (snmptrap.rules) Event is an RFC1215 generic trap. >>>>>")
                    
                @Agent = "Generic-IETF-RFC1215"
            
                switch($generic-trap)
                {
                    case "2"|"3": ### linkDown, linkUp
                    
                        if(nmatch($OID2, "1.3.6.1.2.1.2.2.1.7"))
                        {
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.                
                            # $2 = ifAdminStatus - The desired state of the
                            #        interface.  The testing(3) state indicates
                            #        that no operational packets can be passed.
                            # $3 = ifOperStatus - The current operational state
                            #        of the interface. The testing(3) state
                            #        indicates that no operational packets can
                            #        be passed.
                            ##########
                            
                            if(regmatch($2, "^.*[A-Za-z].*$")||regmatch($3, "^.*[A-Za-z].*$"))
                            {
                                $MIBFileNotNull = 1
                            }
                            
                            $ifIndex = $1
                            $ifAdminStatus = lookup($2, ifAdminStatus) + " ( " + $2 + " )"
                            $ifOperStatus = lookup ($3, ifOperStatus) + " ( " + $3 + " )"
                            details($ifIndex,$ifAdminStatus,$ifOperStatus)
                                
                            switch($2)
                            {
                                case "2": ### Down
                                    @Summary = @Summary + ", Administratively  ( ifEntry." + $1 + " )"
                                    
                                        $SEV_KEY = $OS_EventId + "_adminDown"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                case "3": ### Testing - in some test mode
                                    @Summary = @Summary + ", Testing  ( ifEntry." + $1 + " )"
                                    
                                        $SEV_KEY = $OS_EventId + "_adminTesting"
                                        $DEFAULT_Severity = 2
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0

                                default:
                                    @Summary = @Summary + "  ( ifEntry." + $1 + " )"
                                    
                                        $SEV_KEY = $OS_EventId + "_adminUp"
                                        $DEFAULT_Severity = 4
                                        $DEFAULT_Type = 1
                                        $DEFAULT_ExpireTime = 0
                            }
                            
                            if(match($generic-trap, "3"))
                            {
                                $DEFAULT_Severity = 1
                                $DEFAULT_Type = 2
                                $DEFAULT_ExpireTime = 0
                            }
                            
                            @Identifier = @Identifier + " " + $2 + " " + $3
                        }
                        else if(nmatch($OID2, "1.3.6.1.2.1.2.2.1.2"))
                        {
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.
                            # $2 = ifDescr - A textual string containing
                            #        information about the interface. This
                            #        string should include the name of the
                            #        manufacturer, the product name and the
                            #        version of the interface
                            #        hardware/software.
                            ##########
                            
                            $ifIndex = $1
                            $ifDescr = $2
                            details($ifIndex,$ifDescr)
                        
                            @Summary = @Summary + "  ( " + $2 + " )"
                        }
                        else
                        {
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.
                            ##########
                            
                            $ifIndex = $1
                            details($ifIndex)
                        
                            @Summary = @Summary + "  ( ifEntry." + $1 + " )"
                        }
                    
                    case "5":
                        
                        ##########
                        # $1 = egpNeighAddr - The IP address of this entry's
                        #        EGP neighbor.
                        ###########
                            
                        $egpNeighAddr = $1
                        details($egpNeighAddr)
                        
                        @AlertKey = $1
                        @Summary = @Summary + "  ( Neighbor: " + $1 + " )"
                        @Identifier = @Identifier + " " + $1
                    
                    default:
                }
            
            default:
            
                ##########
                # First comes a dummy enterprise to start the if/else chain
                ##########

                if(match($enterprise, ""))
                {
                    @Summary = "Dummy Enterprise! If you matched here you have problems! (see details)"
                    details($*)
                }

                ###############################################################
                # Enter "Enterprise Specific Generic Trap" includes below
                # with the following syntax:
                #
                # include "<$NCHOME>/etc/rules/include-snmptrap/generic/
                # <rulesfile>.include.rules"
                ###############################################################
        
                #include "$NC_RULES_HOME/include-snmptrap/generic/cisco.generic.include.snmptrap.rules"
                #include "$NC_RULES_HOME/include-snmptrap/generic/foundry.generic.include.snmptrap.rules"
                #include "$NC_RULES_HOME/include-snmptrap/generic/huawei.generic.include.snmptrap.rules"
                #include "$NC_RULES_HOME/include-snmptrap/generic/juniper.generic.include.snmptrap.rules"
                
                ###############################################################
                # End of "Enterprise Specific Generic Trap" rules file includes
                ###############################################################
                
                else ### Handle Unknown Enterprises as SNMPv1 Generic Traps
                {
                    @Agent = "Generic-Unknown"
                    
                    switch($generic-trap)
                    {
                        case "2"|"3": ### linkDown, linkUp
                            
                            ##########
                            # $1 = ifIndex - A unique value for each interface.
                            #        Its value ranges between 1 and the value
                            #        of ifNumber. The value for each interface
                            #        must remain constant at least from one
                            #        re-initialization of the entity's network
                            #        management system to the next
                            #        re-initialization.
                            ##########
                            
                            $ifIndex = $1
                            details($ifIndex)
                
                            @Summary = @Summary + "  ( ifEntry." + $1 + " )  ( Enterprise: " + $enterprise + " )"
        
                        default:
                        
                            @Summary = @Summary + "  ( Enterprise: " + $enterprise + " )"
                    }   
                }
        }
                
        ##########
        # Handle Severity via Lookup.
        ##########
        
        if(exists($SEV_KEY))
        {
            [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, snmptrap_sev)
        }
        else
        {
            [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, snmptrap_sev)
        }
        include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"
        
        ##########
        # End of Severity via Lookup.
        ##########
    }
}

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/snmptrap.adv.include.rules"
include "$NC_RULES_HOME/snmptrap.user.include.rules"

##########
# End of "Advanced" and "User" includes.
##########

##########
# Warn about improperly set QuietOutput or MIBFile properties.
##########

if(match($NoQuietOutput, "1"))
{
    log(DEBUG, "<<<<< (snmptrap.rules) WARNING: QuietOutput NOT SET!!! >>>>>")
                    
    @Summary = "[QuietOutput NOT SET!!!] " + @Summary
}

if(match($MIBFileNotNull, "1"))
{
    log(DEBUG, "<<<<< (snmptrap.rules) WARNING: MIBFile NOT NULL!!! >>>>>")
                    
    @Summary = "[MIBFile NOT NULL!!!] " + @Summary
}

##########
# End of Warn about improperly set properties.
##########

##########
# The following include statement is required by Netcool's advanced correlation
# logic.
##########

if(nmatch(@Agent, "Cisco-IOS"))
{
##    include "$NC_RULES_HOME/include-syslog/CorrScore.include.syslog.rules"
##    include "$NC_RULES_HOME/include-syslog/PreClass.include.syslog.rules"
}
else
{
    include "$NC_RULES_HOME/include-snmptrap/CorrScore.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/adtran/adtran-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/adva/adva-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/alliedtelesyn/alliedtelesyn-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/ascend/ascend-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/ATMF/ATMF-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/bridgewater/bridgewater-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/chipcom/chipcom-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/ciena/ciena-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/cisco/cisco-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/empirix/empirix-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/enterasys/enterasys-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/fore/fore-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/foundry/foundry-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/huawei/huawei-preclass.include.snmptrap.rules"
##    include "$NC_RULES_HOME/include-snmptrap/IANA/IANA-preclass.include.snmptrap.rules" 
    #include "$NC_RULES_HOME/include-snmptrap/ibm/ibm-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/IEEE/IEEE-preclass.include.snmptrap.rules"
##    include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/juniper/juniper-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/latitude/latitude-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/networkharmoni/networkharmoni-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/nortel/nortel-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/ntntech/ntntech-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/rapidcity/rapidcity-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/shasta/shasta-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/stratacom/stratacom-preclass.include.snmptrap.rules"
    #include "$NC_RULES_HOME/include-snmptrap/synoptics/synoptics-preclass.include.snmptrap.rules"
    include "$NC_RULES_HOME/include-snmptrap/AssignCorrectAdvValue.include.snmptrap.rules"
}

##########
# End of advanced correlation include files.
##########

##########
# Enter "compatibility" includes below with the following syntax:
#
# include "<$NCHOME>/etc/rules/include-compat/<rulesfile>.include.compat.rules"
##########

include "$NC_RULES_HOME/include-compat/omnibus36.include.compat.rules"
include "$NC_RULES_HOME/include-compat/AdvCorr36.include.compat.rules"
#include "$NC_RULES_HOME/include-compat/neusecure-gw-snmptrap.include.compat.rules"
#include "$NC_RULES_HOME/include-compat/neusecure-gw.include.compat.rules"

##########
# End of "compatibility" includes.
##########



#  20100430		Changes by Chris Janes of Innovise ESM
include "$NC_RULES_HOME/include-snmptrap/probe_load.include.rules"
include "$NC_RULES_HOME/include-snmptrap/snmp_discard.include.rules"


log(DEBUG, "<<<<< Leaving... snmptrap.rules >>>>>")

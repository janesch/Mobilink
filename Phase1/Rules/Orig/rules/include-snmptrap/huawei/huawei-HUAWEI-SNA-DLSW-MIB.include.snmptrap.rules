###############################################################################
#
#    Licensed Materials - Property of IBM
#    5724-O48
#
#    (C) Copyright IBM Corp. 2007
#    All Rights Reserved
#
#    US Government Users Restricted Rights - Use, duplication or
#    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#    huawei-HUAWEI-SNA-DLSW-MIB.include.snmptrap.rules 3.0
#    2007/05/07 Gerry van der Zanden
#
###############################################################################
#
# 3.0 - Updated release for NIM-03
#
#          -  Supports "Advanced" and "User" include files
#          -  Supports "Severity" lookup tables
#
###############################################################################
#
# 2.0 - Updated release
#
#          -  Repackage for NIM-02
#          -  HUAWEI-SNA-DLSW-MIB release V1.3
#
###############################################################################
#
# 1.0 - Initial Release.
#
#        Compatible with:
#
#          -  Netcool/OMNIbus 3.6 and 7.x
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#          -  HUAWEI-SNA-DLSW-MIB release V1.2
#
###############################################################################

case ".1.3.6.1.4.1.2011.2.34.8": ### Huawei Technologies - Notifications from HUAWEI-SNA-DLSW-MIB

    log(DEBUG, "<<<<< Entering... huawei-HUAWEI-SNA-DLSW-MIB.include.snmptrap.rules >>>>>")

    @Agent = "Huawei AR- and S-Series"
    @Class = "40579"

    $OPTION_TypeFieldUsage = "3.6"

    switch($specific-trap)
    {
        case "1": ### dlswTrapTConnPartnerReject

            ##########
            # This trap is sent each time a transport connection is rejected by
            # a partner DLSw during Capabilities Exchanges. The emission of
            # this trap is controlled by dlswTrapCntlCircuit.
            #
            # $1 = dlswRemotePeerAddr - The remote peer address for this
            #        transport connection. 
            ##########

            $dlswRemotePeerAddr = $1
            details($dlswRemotePeerAddr)

            $OS_EventId = "SNMPTRAP-huawei-HUAWEI-SNA-DLSW-MIB-dlswTrapTConnPartnerReject"

            @AlertGroup = "DLSw Transport Connection Rejected"
            @AlertKey = "dlswRemotePeerEntry." + $dlswRemotePeerAddr
            @Summary = "DLSw Transport Connection Rejected  ( Remote Peer: " + $1 + " )"

            $DEFAULT_Severity = 3
            $DEFAULT_Type = 1
            $DEFAULT_ExpireTime = 0

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### dlswTrapTConnChangeState

            ##########
            # This trap is sent each time a transport connection changes state.
            # The emission of this trap is controlled by dlswTrapCntlTConn.
            #
            # $1 = dlswRemotePeerAddr - The remote peer address for this
            #        transport connection. 
            # $2 = dlswRemotePeerLinkState - The state of this tcp transport
            #        connection. 
            ##########

            $dlswRemotePeerAddr = $1
            $dlswRemotePeerLinkState = lookup($2,dlswRemotePeerLinkState) + " ( " + $2 + " )"
            details($dlswRemotePeerAddr,
                    $dlswRemotePeerLinkState)

            $OS_EventId = "SNMPTRAP-huawei-HUAWEI-SNA-DLSW-MIB-dlswTrapTConnChangeState"

            @AlertGroup = "DLSw Transport Connection Status"
            @AlertKey = "dlswRemotePeerEntry." + $dlswRemotePeerAddr
            @Summary = "DLSw Transport Connection State Change  ( Remote Peer: " + $1 + ", Status: " + $dlswRemotePeerLinkState + " )"
            update (@Summary)

            switch($2)
            {
            case "1": ### connecting

                $OS_EventId = $OS_EventId + "_connecting"

                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "2": ### initCapExchange

                $OS_EventId = $OS_EventId + "_initCapExchange"

                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "3": ### connected

                $OS_EventId = $OS_EventId + "_connected"

                $DEFAULT_Severity = 1
                $DEFAULT_Type = 2
                $DEFAULT_ExpireTime = 0

            case "4": ### quiescing

                $OS_EventId = $OS_EventId + "_quiescing"

                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "5": ### disconnecting

                $OS_EventId = $OS_EventId + "_disconnecting"

                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "6": ### disconnected

                $OS_EventId = $OS_EventId + "_disconnected"

                $DEFAULT_Severity = 4
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            default:

                $OS_EventId = $OS_EventId + "_default"

                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0
            }

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "3": ### dlswTrapCircuitChangeState

            ##########
            # This trap is sent each time a circuit change state.
            # The emission of this trap is controlled by dlswTrapCntlCircuit.
            #
            # $1 = dlswCircuitS1CircuitId - The Circuit ID assigned by this
            #        DLSw node to this circuit. The first four octets are the
            #        DLC port Id, and the second four octets are the Data Link
            #        Correlator. If the DLSw SSP was not used to establish this
            #        circuit, the value will be a string of zero length.
            # $2 = dlswCircuitState - The current state of this circuit. The
            #        agent, implementation specific, may choose to keep entries
            #        for some period of time after circuit disconnect, so the
            #        manager can gather the time and cause of disconnection.
            #        While all of the specified values may be returned from a GET
            #        operation, the only SETable value is `disconnectPending'.
            #        When this value is set, DLSw should perform the appropriate
            #        action given its previous state (e.g., send HALT_DL if the
            #        state was `connected') to bring the circuit down to the
            #        `disconnected' state. Both the partner DLSw and local end
            #        station(s) should be notified as appropriate. This MIB
            #        provides no facility to re-establish a disconnected circuit,
            #        because in DLSw this should be an end station-driven function.
            # $3 = dlswCircuitS1Mac - The MAC Address of End Station 1 (S1)
            #        used for this circuit.
            # $4 = dlswCircuitS1Sap - The SAP at End Station 1 (S1)
            #        used for this circuit.
            # $5 = dlswCircuitS2Mac - The MAC Address of End Station 2 (S2)
            #        used for this circuit.
            # $6 = dlswCircuitS2Sap - The SAP at End Station 2 (S2)
            #        used for this circuit.
            ##########

            $dlswCircuitS1CircuitId = $1
            $dlswCircuitState = lookup($2,DlswCircuitState) + " ( " + $2 + " )"
            $dlswCircuitS1Mac = $3
            $dlswCircuitS1Sap = $4
            $dlswCircuitS2Mac = $5
            $dlswCircuitS2Sap = $6
            details($dlswCircuitS1CircuitId,$dlswCircuitState,
                    $dlswCircuitS1Mac,$dlswCircuitS1Sap,
                    $dlswCircuitS2Mac,$dlswCircuitS2Sap)

            $OS_EventId = "SNMPTRAP-huawei-HUAWEI-SNA-DLSW-MIB-dlswTrapCircuitChangeState"

            @AlertGroup = "DLSw Circuit Status"
            @AlertKey = "dlswCircuitEntry." + $dlswCircuitS1CircuitId
            @Summary = "DLSw Circuit State Change  ( Circuit ID: " + $1 + ", Status: " + $dlswCircuitState + " )"
            update(@Summary)

            switch($2)
            {
            case "1": ### disconnected

                $OS_EventId = $OS_EventId + "_disconnected"
 
                $DEFAULT_Severity = 4
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "2": ### circuitStart

                $OS_EventId = $OS_EventId + "_circuitStart"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "3": ### resolvePending

                $OS_EventId = $OS_EventId + "_resolvePending"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "4": ### circuitPending

                $OS_EventId = $OS_EventId + "_circuitPending"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "5": ### circuitEstablished

                $OS_EventId = $OS_EventId + "_circuitEstablished"
 
                $DEFAULT_Severity = 1
                $DEFAULT_Type = 2
                $DEFAULT_ExpireTime = 0

            case "6": ### connectPending

                $OS_EventId = $OS_EventId + "_connectPending"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "7": ### contactPending

                $OS_EventId = $OS_EventId + "_contactPending"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "8": ### connected

                $OS_EventId = $OS_EventId + "_connected"
 
                $DEFAULT_Severity = 1
                $DEFAULT_Type = 2
                $DEFAULT_ExpireTime = 0

            case "9": ### disconnectPending

                $OS_EventId = $OS_EventId + "_disconnectPending"
 
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "10": ### haltPending

                $OS_EventId = $OS_EventId + "_haltPending"
 
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "11": ### haltPendingNoack

                $OS_EventId = $OS_EventId + "_haltPendingNoack"
 
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "12": ### circuitRestart

                $OS_EventId = $OS_EventId + "_circuitRestart"
 
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            case "13": ### restartPending

                $OS_EventId = $OS_EventId + "_restartPending"
 
                $DEFAULT_Severity = 3
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            default:

                $OS_EventId = $OS_EventId + "_default"
 
                $DEFAULT_Severity = 2
                $DEFAULT_Type = 1
                $DEFAULT_ExpireTime = 0

            }

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            details($*)
    }

#########
# Handle Severity via Lookup.
##########

if(exists($SEV_KEY))
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, huawei-HUAWEI-SNA-DLSW-MIB_sev)
}
else
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, huawei-HUAWEI-SNA-DLSW-MIB_sev)
}
include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"

##########
# End of Severity via Lookup.
##########

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-snmptrap/huawei/huawei-HUAWEI-SNA-DLSW-MIB.adv.include.snmptrap.rules"
include "$NC_RULES_HOME/include-snmptrap/huawei/huawei-HUAWEI-SNA-DLSW-MIB.user.include.snmptrap.rules"

##########
# End of "Advanced" and "User" includes.
##########

log(DEBUG, "<<<<< Leaving... huawei-HUAWEI-SNA-DLSW-MIB.include.snmptrap.rules >>>>>")

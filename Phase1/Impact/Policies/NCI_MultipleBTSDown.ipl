////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MultipleBTSDown.ipl
//
//	Impact policy for Mobilink - Multiple BTS Down Alarm Handling
//	Chris Janes of Innovise ESM
//
//	V0.0	20100625	Chris Janes Original
//
////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////
//
//  Parent / Child Indicator Field Values
//
//	0 - Event not involved in Parent/Child Relationship
//	1 - Potential Child Event
//	2 - Potential Parent Event
//	3 - Potential Child and Parent Event
//	4 - Established Child Event
//	5 - Established Parent Event
//	6 - Child Event but no Parent Found
//	7 - Parent Event but no Child Found
//	8 - Relationship not found in table
//////////////////

//Initialise Variables
ParentChildIndicator =0;

// Extract EventId info from Event
myEvent = @EventType;
myManager = @Manager;
myNode = @Node;
myAlertKey = @AlertKey;

// Lookup number of potential Parents 

DataType = "CMDB_ParentChild";		// this needs to be setup
Filter = "";		// this needs to be setup
CountOnly = False;
aryPotentialParents =
numPotentialParents = length(aryPotentialParents);

// Lookup number of potential Child

DataType = "CMDB_ParentChild";		// this needs to be setup
Filter = "";		// this needs to be setup
CountOnly = False;
aryPotentialChildren =
numPotentialChildren = length(aryPotentialParents);

//Is number of potential Parents = 0

if (numPotentialParents == 0 )
{
	// Is the number of potential Children 0
	if( numPotentialChildren == 0 )
	{
		ParentChildIndicator = 0;
	}
	else
	{
		ParentChildIndicator = 2;
	}
}
else
{
	// Is the number of potential Children 0
	if( numPotentialChildren == 0 )
	{
		ParentChildIndicator = 1;
	}
	else
	{
		ParentChildIndicator = 3;
	}
}

// get rid of events that do not require processing

if (ParentChildIndicator == 0)
{
	Exit;
}
elseif (ParentChildIndicator == 1)
{
	CheckParents();
}
elseif (ParentChildIndicator == 2)
{
	CheckChildren();
}
elseif (ParentChildIndicator == 3)
{
	CheckParentsAndChildren();
}





Function CheckParents()
{
	ParentChildIndicator = 6;
	CountPotentialParents = 0;

	While (CountPotentialParents < numPotentialParents )
	{
	// Get Details of Parent to look up

	// Look up Potential Parent events
	DataType = "CMDB_ParentChild";		// this needs to be setup
	Filter = "";		// this needs to be setup
	CountOnly = False;
	aryActualParents =
	numPotentialParents = length(aryPotentialParents);


	CountPotentialParents = CountPotentialParents + 1;
	}

}
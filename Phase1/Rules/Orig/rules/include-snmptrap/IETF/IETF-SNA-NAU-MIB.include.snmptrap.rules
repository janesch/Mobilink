###############################################################################
#
#    Licensed Materials - Property of IBM
#
#    (C) Copyright IBM Corp. 2006
#    All Rights Reserved
#
#    IETF-SNA-NAU-MIB.include.snmptrap.rules 1.0
#    2000/05/09 Robert Cowart
#
###############################################################################
###############################################################################
#
# 1.0 - Initial Release.
#
#        Compatible with:
#
#          -  Netcool/Omnibus 3.x and 7
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#
#          -  IETF-SNA-NAU-MIB
#
###############################################################################

case ".1.3.6.1.2.1.34.1.1.10": ### SNA NAU - Node Notifications from SNA-NAU-MIB

    log(DEBUG, "<<<<< Entering... IETF-SNA-NAU-MIB.include.snmptrap.rules >>>>>")
    @Agent = "IETF-SNA-NAU-MIB"
    @Class = "40086"

    $OPTION_TypeFieldUsage = "3.6"
    
    switch ($specific-trap)
    {
        case "1": ### snaNodeStateChangeTrap
        
            ##########
            # $1 = snaNodeOperName
            # $2 = snaNodeOperState
            ##########

            $snaNodeOperName = $1
            $snaNodeOperState = lookup($2, snaNodeOperState) + " ( " + $2 + " )" 
            @AlertGroup = "SNA Node State Change"
            $snaNodeAdminIndex = extract($OID2, "\.([0-9]+)$")
            @AlertKey = "snaNodeOperEntry." + $snaNodeAdminIndex
            $OS_EventId = "SNMPTRAP-IETF-SNA-NAU-MIB-snaNodeStateChangeTrap"
            switch ($2)
            {
                case "1": ### inactive - A row representing the Node has been created in the AdminTable and, the Node is ready for activation -or- an active Node has been stopped -or- a waiting Node has returned to the inactive state.
                    @Summary = "SNA Node ( " + $1 + " ) Inactive"
                    $SEV_KEY = $OS_EventId + "_inactive"
                    $DEFAULT_Severity = 4
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "2": ### active - The Node is ready and operating.
                    @Summary = "SNA Node ( " + $1 + " ) Active"
                    $SEV_KEY = $OS_EventId + "_active"
                    $DEFAULT_Severity = 1
                    $DEFAULT_Type = 2
                    $DEFAULT_ExpireTime = 0
                case "3": ### waiting - A request to have the Node activated has been issued, and the Node is pending activation.
                    @Summary = "SNA Node ( " + $1 + " ) Waiting"
                    $SEV_KEY = $OS_EventId + "_waiting"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "4": ### stopping - The request to stop the Node has been issued while the StopMethod normal or immediate is used.
                    @Summary = "SNA Node ( " + $1 + " ) Stopping"
                    $SEV_KEY = $OS_EventId + "_stopping"
                    $DEFAULT_Severity = 3
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                default:
                    @Summary = "SNA Node ( " + $1 + " ) Unknown"
                    $SEV_KEY = $OS_EventId + "_unknown"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $2 + " " + @Agent + " " + @Manager
            details($snaNodeOperName, $snaNodeOperState, $snaNodeAdminIndex)

        case "2": ### snaNodeActFailTrap
        
            ##########
            # $1 = snaNodeOperName
            # $2 = snaNodeOperState
            # $3 = snaNodeOperActFailureReason
            ##########

            $snaNodeOperName = $1
            $snaNodeOperState = lookup($2, snaNodeOperState) + " ( " + $2 + " )"
            $FailureReason = lookup($3, snaNodeOperActFailureReason) + " ( " + $3 + " )"
            @AlertGroup = "SNA Node Activation"
            $snaNodeAdminIndex = extract($OID2, "\.([0-9]+)$")
            @AlertKey = "snaNodeOperEntry." + $snaNodeAdminIndex
            $OS_EventId = "SNMPTRAP-IETF-SNA-NAU-MIB-snaNodeStateChangeTrap"
            switch ($2)
            {
                case "1": ### inactive - A row representing the Node has been created in the AdminTable and, the Node is ready for activation -or- an active Node has been stopped -or- a waiting Node has returned to the inactive state.
                    @Summary = "SNA Node ( " + $1 + " ) Activiation Failure, Inactive: FailureReason = " + $FailureReason
                    $SEV_KEY = $OS_EventId + "_inactive"
                    $DEFAULT_Severity = 4
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "2": ### active - The Node is ready and operating.
                    @Summary = "SNA Node ( " + $1 + " ) Active"
                    $SEV_KEY = $OS_EventId + "_active"
                    $DEFAULT_Severity = 1
                    $DEFAULT_Type = 2
                    $DEFAULT_ExpireTime = 0
                case "3": ### waiting - A request to have the Node activated has been issued, and the Node is pending activation.
                    @Summary = "SNA Node ( " + $1 + " ) Waiting"
                    $SEV_KEY = $OS_EventId + "_waiting"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "4": ### stopping - The request to stop the Node has been issued while the StopMethod normal or immediate is used.
                    @Summary = "SNA Node ( " + $1 + " ) Activiation Failure, Stopping: FailureReason = " + $FailureReason
                    $SEV_KEY = $OS_EventId + "_stopping"
                    $DEFAULT_Severity = 3
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                default:
                    @Summary = "SNA Node ( " + $1 + " ) Unknown"
                    $SEV_KEY = $OS_EventId + "_unknown"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
            }            
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $2 + " " + @Agent + " " + @Manager
            details($snaNodeOperName, $snaNodeOperState, $FailureReason, $snaNodeAdminIndex)

        default:
        
            @Summary = "Unknown specific trap number (" + $specific-trap + ") received for enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + $enterprise + " " + $generic-trap + " " + $specific-trap + " " + @Agent + " " + @Manager
            details($*)
    }

##########
# Handle Severity via Lookup.
##########

if(exists($SEV_KEY))
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, IETF-SNA-NAU-MIB_sev)
}
else
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, IETF-SNA-NAU-MIB_sev)
}
include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"

##########
# End of Severity via Lookup.
##########

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-SNA-NAU-MIB_NODE.adv.include.snmptrap.rules"
include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-SNA-NAU-MIB_NODE.user.include.snmptrap.rules"

##########
# End of "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-common/load_include.rules"

log(DEBUG, "<<<<< Leaving... IETF-SNA-NAU-MIB.include.snmptrap.rules >>>>>")

case ".1.3.6.1.2.1.34.1.2.5": ### SNA NAU - LU (Logical Unit) Notifications from SNA-NAU-MIB

    log(DEBUG, "<<<<< Entering... IETF-SNA-NAU-MIB.include.snmptrap.rules >>>>>")
    @Agent = "IETF-SNA-NAU-MIB"
    @Class = "40086"

    $OPTION_TypeFieldUsage = "3.6"
    
    switch ($specific-trap)
    {
        case "1": ### snaLuStateChangeTrap
        
            ##########
            # $1 = snaLuOperName
            # $2 = snaLuOperSnaName
            # $3 = snaLuOperState
            ##########

            $snaLuOperName = $1
            $snaLuOperSnaName = $2
            $snaLuOperState = lookup($3, snaLuOperState) + " ( " + $3 + " )" 
            @AlertGroup = "SNA LU State Change"
            $snaNodeAdminIndex = extract($OID3, "\.([0-9]+)\.[0-9]+$")
            $snaLuAdminLuIndex = extract($OID3, "\.([0-9]+)$")
            @AlertKey = "snaLuOperEntry." + $snaNodeAdminIndex + "." + $snaLuAdminLuIndex
            $OS_EventId = "SNMPTRAP-IETF-SNA-NAU-MIB-snaLuStateChangeTrap"
            switch ($3)
            {
                case "1": ### inactive 
                    @Summary = "SNA LU ( " + $1 + " ) Inactive"
                    $SEV_KEY = $OS_EventId + "_inactive"
                    $DEFAULT_Severity = 4
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "2": ### active
                    @Summary = "SNA LU ( " + $1 + " ) Active"
                    $SEV_KEY = $OS_EventId + "_active"
                    $DEFAULT_Severity = 1
                    $DEFAULT_Type = 2
                    $DEFAULT_ExpireTime = 0
                default:
                    @Summary = "SNA LU ( " + $1 + " ) Unknown"
                    $SEV_KEY = $OS_EventId + "_unknown"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
            }
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $2 + " " + @Agent + " " + @Manager
            details($snaLuOperName, $snaLuOperSnaName, $snaLuOperState)

        case "2": ### snaLuSessnBindFailTrap
        
            ##########
            # $1 = snaLuSessnLocalApplName
            # $2 = snaLuSessnRemoteLuName
            # $3 = snaLuSessnOperState
            # $4 = snaLuSessnSenseData
            ##########

            $snaLuSessnLocalApplName = $1
            $snaLuSessnRemoteLuName = $2
            $snaLuSessnOperState = lookup($3, snaLuSessnOperState) + " ( " + $3 + " )"
            $snaLuSessnSenseData = $4
            @AlertGroup = "SNA LU Session Bind"
            
            $snaNodeAdminIndex = extract($OID3, "\.([0-9]+)\.[0-9]+\.[0-9]+\.[0-9]+$")
            $snaLuAdminLuIndex = extract($OID3, "\.([0-9]+)\.[0-9]+\.[0-9]+$")
            $snaLuSessnRluIndex = extract($OID3, "\.([0-9]+)\.[0-9]+$")
            $snaLuSessnIndex = extract($OID3, "\.([0-9]+)$")

            @AlertKey = "snaLuSessnEntry." + $snaNodeAdminIndex + "." + $snaLuAdminLuIndex + "." + $snaLuSessnRluIndex + "." + $snaLuSessnIndex
 
            $OS_EventId = "SNMPTRAP-IETF-SNA-NAU-MIB-snaLuSessnBindFailTrap"
            switch ($3)
            {
                case "1": ### unbound
                    @Summary = "SNA LU Session unbound" 
                    $SEV_KEY = $OS_EventId + "_unbound"
                    $DEFAULT_Severity = 4
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "2": ### pendingBind 
                    @Summary = "SNA LU Session Bind Pending"
                    $SEV_KEY = $OS_EventId + "_pendingBind"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                case "3": ### bound 
                    @Summary = "SNA LU Session Binded"
                    $SEV_KEY = $OS_EventId + "_bound"
                    $DEFAULT_Severity = 1
                    $DEFAULT_Type = 2
                    $DEFAULT_ExpireTime = 0
                case "4": ### pendingUnbind
                    @Summary = "SNA LU Session Unbind Pending"
                    $SEV_KEY = $OS_EventId + "_pendingUnbind"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
                default:
                    @Summary = "SNA LU Session Unknown"
                    $SEV_KEY = $OS_EventId + "_unknown"
                    $DEFAULT_Severity = 2
                    $DEFAULT_Type = 1
                    $DEFAULT_ExpireTime = 0
            }            
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + $2 + " " + @Agent + " " + @Manager
            details($snaLuSessnLocalApplName, $snaLuSessnRemoteLuName, $snaLuSessnOperState, $snaLuSessnSenseData)

        default:
        
            @Summary = "Unknown specific trap number (" + $specific-trap + ") received for enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + $enterprise + " " + $generic-trap + " " + $specific-trap + " " + @Agent + " " + @Manager
            details($*)
    }

##########
# Handle Severity via Lookup.
##########

if(exists($SEV_KEY))
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, IETF-SNA-NAU-MIB_sev)
}
else
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, IETF-SNA-NAU-MIB_sev)
}
include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"

##########
# End of Severity via Lookup.
##########

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-SNA-NAU-MIB_LU.adv.include.snmptrap.rules"
include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-SNA-NAU-MIB_LU.user.include.snmptrap.rules"

##########
# End of "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-common/load_include.rules"

log(DEBUG, "<<<<< Leaving... IETF-SNA-NAU-MIB.include.snmptrap.rules >>>>>")


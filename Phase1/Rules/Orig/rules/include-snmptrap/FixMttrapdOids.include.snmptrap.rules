##############################################################################
#
#    Licensed Materials - Property of IBM
#
#    (C) Copyright IBM Corp. 2006
#    All Rights Reserved
#
#    FixMttrapdOids.include.snmptrap.rules 1.1
#    2005/03/06 Robert Cowart
#
###############################################################################
###############################################################################
#
#        1.0 - Initial Release.
#
#        Compatible with:
#
#          -  Netcool/Omnibus 3.x and 7
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#
###############################################################################
#
# 1.1 - Added basic debug logging.
#
###############################################################################
# The following logic will remove the leading . from all OIDx tokens created by
# versions of the MTTrapd Probe which shipped Netcool/OMNIbus 3.5 or later
# (including patches).
#
# NOTE: The long-term plan is to update all existing rules file, where
#       necessary, for compatibility with the newer versions of MTTrapd which
#       in fact represents OIDs correctly as outlined in various RFCs.
###############################################################################

log(DEBUG, "<<<<< Entering... FixMttrapdOids.include.snmptrap.rules >>>>>")

if(exists($OID1))
{
    if(nmatch($OID1, "."))
    {
        $OID1 = extract($OID1, "^\.(.*)$")
    }
if(exists($OID2))
{
    if(nmatch($OID2, "."))
    {
        $OID2 = extract($OID2, "^\.(.*)$")
    }
if(exists($OID3))
{
    if(nmatch($OID3, "."))
    {
        $OID3 = extract($OID3, "^\.(.*)$")
    }
if(exists($OID4))
{
    if(nmatch($OID4, "."))
    {
        $OID4 = extract($OID4, "^\.(.*)$")
    }
if(exists($OID5))
{
    if(nmatch($OID5, "."))
    {
        $OID5 = extract($OID5, "^\.(.*)$")
    }
if(exists($OID6))
{
    if(nmatch($OID6, "."))
    {
        $OID6 = extract($OID6, "^\.(.*)$")
    }
if(exists($OID7))
{
    if(nmatch($OID7, "."))
    {
        $OID7 = extract($OID7, "^\.(.*)$")
    }
if(exists($OID8))
{
    if(nmatch($OID8, "."))
    {
        $OID8 = extract($OID8, "^\.(.*)$")
    }
if(exists($OID9))
{
    if(nmatch($OID9, "."))
    {
        $OID9 = extract($OID9, "^\.(.*)$")
    }
if(exists($OID10))
{
    if(nmatch($OID10, "."))
    {
        $OID10 = extract($OID10, "^\.(.*)$")
    }
if(exists($OID11))
{
    if(nmatch($OID11, "."))
    {
        $OID11 = extract($OID11, "^\.(.*)$")
    }
if(exists($OID12))
{
    if(nmatch($OID12, "."))
    {
        $OID12 = extract($OID12, "^\.(.*)$")
    }
if(exists($OID13))
{
    if(nmatch($OID13, "."))
    {
        $OID13 = extract($OID13, "^\.(.*)$")
    }
if(exists($OID14))
{
    if(nmatch($OID14, "."))
    {
        $OID14 = extract($OID14, "^\.(.*)$")
    }
if(exists($OID15))
{
    if(nmatch($OID15, "."))
    {
        $OID15 = extract($OID15, "^\.(.*)$")
    }
if(exists($OID16))
{
    if(nmatch($OID16, "."))
    {
        $OID16 = extract($OID16, "^\.(.*)$")
    }
if(exists($OID17))
{
    if(nmatch($OID17, "."))
    {
        $OID17 = extract($OID17, "^\.(.*)$")
    }
if(exists($OID18))
{
    if(nmatch($OID18, "."))
    {
        $OID18 = extract($OID18, "^\.(.*)$")
    }
if(exists($OID19))
{
    if(nmatch($OID19, "."))
    {
        $OID19 = extract($OID19, "^\.(.*)$")
    }
if(exists($OID20))
{
    if(nmatch($OID20, "."))
    {
        $OID20 = extract($OID20, "^\.(.*)$")
    }
if(exists($OID21))
{
    if(nmatch($OID21, "."))
    {
        $OID21 = extract($OID21, "^\.(.*)$")
    }
if(exists($OID22))
{
    if(nmatch($OID22, "."))
    {
        $OID22 = extract($OID22, "^\.(.*)$")
    }
if(exists($OID23))
{
    if(nmatch($OID23, "."))
    {
        $OID23 = extract($OID23, "^\.(.*)$")
    }
if(exists($OID24))
{
    if(nmatch($OID24, "."))
    {
        $OID24 = extract($OID24, "^\.(.*)$")
    }
if(exists($OID25))
{
    if(nmatch($OID25, "."))
    {
        $OID25 = extract($OID25, "^\.(.*)$")
    }
if(exists($OID26))
{
    if(nmatch($OID26, "."))
    {
        $OID26 = extract($OID26, "^\.(.*)$")
    }
if(exists($OID27))
{
    if(nmatch($OID27, "."))
    {
        $OID27 = extract($OID27, "^\.(.*)$")
    }
if(exists($OID28))
{
    if(nmatch($OID28, "."))
    {
        $OID28 = extract($OID28, "^\.(.*)$")
    }
if(exists($OID29))
{
    if(nmatch($OID29, "."))
    {
        $OID29 = extract($OID29, "^\.(.*)$")
    }
if(exists($OID30))
{
    if(nmatch($OID30, "."))
    {
        $OID30 = extract($OID30, "^\.(.*)$")
    }
if(exists($OID31))
{
    if(nmatch($OID31, "."))
    {
        $OID31 = extract($OID31, "^\.(.*)$")
    }
if(exists($OID32))
{
    if(nmatch($OID32, "."))
    {
        $OID32 = extract($OID32, "^\.(.*)$")
    }
if(exists($OID33))
{
    if(nmatch($OID33, "."))
    {
        $OID33 = extract($OID33, "^\.(.*)$")
    }
if(exists($OID34))
{
    if(nmatch($OID34, "."))
    {
        $OID34 = extract($OID34, "^\.(.*)$")
    }
if(exists($OID35))
{
    if(nmatch($OID35, "."))
    {
        $OID35 = extract($OID35, "^\.(.*)$")
    }
if(exists($OID36))
{
    if(nmatch($OID36, "."))
    {
        $OID36 = extract($OID36, "^\.(.*)$")
    }
if(exists($OID37))
{
    if(nmatch($OID37, "."))
    {
        $OID37 = extract($OID37, "^\.(.*)$")
    }
if(exists($OID38))
{
    if(nmatch($OID38, "."))
    {
        $OID38 = extract($OID38, "^\.(.*)$")
    }
if(exists($OID39))
{
    if(nmatch($OID39, "."))
    {
        $OID39 = extract($OID39, "^\.(.*)$")
    }
if(exists($OID40))
{
    if(nmatch($OID40, "."))
    {
        $OID40 = extract($OID40, "^\.(.*)$")
    }
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

###############################################################################
# End of leading . removal from OIDx tokens.
###############################################################################

log(DEBUG, "<<<<< Leaving... FixMttrapdOids.include.snmptrap.rules >>>>>")

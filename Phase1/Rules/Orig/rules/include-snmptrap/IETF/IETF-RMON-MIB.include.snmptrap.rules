###############################################################################
#
#    Licensed Materials - Property of IBM
#
#    (C) Copyright IBM Corp. 2006
#    All Rights Reserved
#
#    IETF-RMON-MIB.include.snmptrap.rules 3.1
#    2005/03/07 Robert Cowart
#
###############################################################################
###############################################################################
#
# 1.0 - Initial Release.
#
#        Compatible with:
#
#          -  Netcool/Omnibus 3.x and 7
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#
#          -  IETF-RMON-MIB
#
###############################################################################

case ".1.3.6.1.2.1.16": ### Remote Network Monitoring (RMON) - Traps from RMON-MIB and RMON-TRAPS

    log(DEBUG, "<<<<< Entering... IETF-RMON-MIB.include.snmptrap.rules >>>>>")

    @Agent = "IETF-RMON-MIB"
    @Class = "40086"
    
    $OPTION_TypeFieldUsage = "3.6"

    switch($specific-trap)
    {
        case "1": ### risingAlarm
              
            ##########
            # The SNMP trap that is generated when an alarm entry crosses its
            # rising threshold and generates an event that is configured for
            # sending SNMP traps.
            #
            # $1 = alarmIndex - An index that uniquely identifies an entry in
            #        the alarm table. Each such entry defines a diagnostic
            #        sample at a particular interval for an object on the
            #        device.
            # $2 = alarmVariable - The object identifier of the particular
            #        variable to be sampled. Only variables that resolve to an
            #        ASN.1 primitive type of INTEGER (INTEGER, Counter, Gauge,
            #        or TimeTicks) may be sampled.
            #
            #        Because SNMP access control is articulated entirely in
            #        terms of the contents of MIB views, no access control
            #        mechanism exists that can restrict the value of this
            #        object to identify only those objects that exist in a
            #        particular MIB view. Because there is thus no acceptable
            #        means of restricting the read access that could be
            #        obtained through the alarm mechanism, the probe must only
            #        grant write access to this object in those views that have
            #        read access to all objects on the probe.
            #
            #        During a set operation, if the supplied variable name is
            #        not available in the selected MIB view, a badValue error
            #        must be returned. If at any time the variable name of an
            #        established alarmEntry is no longer available in the
            #        selected MIB view, the probe must change the status of
            #        this alarmEntry to invalid(4).
            #
            #        This object may not be modified if the associated
            #        alarmStatus object is equal to valid(1).
            # $3 = alarmSampleType - The method of sampling the selected
            #        variable and calculating the value to be compared against
            #        the thresholds. (see Lookup Table)
            # $4 = alarmValue - The value of the statistic during the last
            #        sampling period. For example, if the sample type is
            #        deltaValue, this value will be the difference between the
            #        samples at the beginning and end of the period. If the
            #        sample type is absoluteValue, this value will be the
            #        sampled value at the end of the period.
            #
            #        This is the value that is compared with the rising and
            #        falling thresholds.
            #
            #        The value during the current sampling period is not made
            #        available until the period is completed and will remain
            #        available until the next period completes.
            # $5 = alarmRisingThreshold - A threshold for the sampled
            #        statistic. When the current sampled value is greater than
            #        or equal to this threshold, and the value at the last
            #        sampling interval was less than this threshold, a single
            #        event will be generated.  A single event will also be
            #        generated if the first sample after this entry becomes
            #        valid is greater than or equal to this threshold and the
            #        associated alarmStartupAlarm is equal to risingAlarm(1) or
            #        risingOrFallingAlarm(3).
            #
            #        After a rising event is generated, another such event will
            #        not be generated until the sampled value falls below this
            #        threshold and reaches the alarmFallingThreshold.
            #
            #        This object may not be modified if the associated
            #        alarmStatus object is equal to valid(1).
            ##########
            
            $alarmIndex = $1
            $alarmVariable = $2
            $alarmSampleType = lookup($3, alarmSampleType)
            $alarmValue = $4
            $alarmRisingThreshold = $5
                        
            $OS_EventId = "SNMPTRAP-IETF-RMON-MIB-risingAlarm"

            @AlertGroup = "RMON Alarm"
            @AlertKey = "alarmEntry." + $1
            @Summary = "RMON Alarm: " + $alarmSampleType + " of " + $2 + ", " + $4 + ", Crossed " + $5
            
            $DEFAULT_Severity = 3
            $DEFAULT_Type = 1
            $DEFAULT_ExpireTime = 0

            $alarmSampleType = lookup($3, alarmSampleType) + " ( " + $3 + " )"
            if(regmatch($OID6, ".*\.5713\.2\.2\.[0-9]+"))
            {
                @Agent = "IETF-RMON-MIB (Niksun-NetVCR)"
                @Class = "40230"
                
                $eventURL = $6
                details($alarmIndex,$alarmVariable,$alarmSampleType,$alarmValue,$alarmRisingThreshold,$eventURL)
            }
            else
            {
                details($alarmIndex,$alarmVariable,$alarmSampleType,$alarmValue,$alarmRisingThreshold)
            }
            
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "2": ### fallingAlarm

            ##########
            # The SNMP trap that is generated when an alarm entry crosses its
            # falling threshold and generates an event that is configured for
            # sending SNMP traps.
            #
            # $1 = alarmIndex - (see above)
            # $2 = alarmVariable - (see above)
            # $3 = alarmSampleType - (see above)
            # $4 = alarmValue - (see above)
            # $5 = alarmFallingThreshold - A threshold for the sampled
            #        statistic. When the current sampled value is less than or
            #        equal to this threshold, and the value at the last
            #        sampling interval was greater than this threshold, a
            #        single event will be generated. A single event will also
            #        be generated if the first sample after this entry becomes
            #        valid is less than or equal to this threshold and the
            #        associated alarmStartupAlarm is equal to fallingAlarm(2)
            #        or risingOrFallingAlarm(3).
            #
            #        After a falling event is generated, another such event
            #        will not be generated until the sampled value rises above
            #        this threshold and reaches the alarmRisingThreshold.
            #
            #        This object may not be modified if the associated
            #        alarmStatus object is equal to valid(1).
            ##########

            $alarmIndex = $1
            $alarmVariable = $2
            $alarmSampleType = lookup($3, alarmSampleType)
            $alarmValue = $4
            $alarmFallingThreshold = $5
            details($alarmIndex,$alarmVariable,$alarmSampleType,$alarmValue,$alarmFallingThreshold)
            
            $OS_EventId = "SNMPTRAP-IETF-RMON-MIB-fallingAlarm"

            @AlertGroup = "RMON Alarm"
            @AlertKey = "alarmEntry." + $1
            @Summary = "RMON Alarm Cleared: " + $alarmSampleType + " of " + $2 + ", " + $4 + ", Crossed " + $5
            
            $DEFAULT_Severity = 1
            $DEFAULT_Type = 2
            $DEFAULT_ExpireTime = 0

            $alarmSampleType = lookup($3, alarmSampleType) + " ( " + $3 + " )"
            if(regmatch($OID6, ".*\.5713\.2\.2\.[0-9]+"))
            {
                @Agent = "IETF-RMON-MIB (Niksun-NetVCR)"
                @Class = "40230"
                
                $eventURL = $6
                details($alarmIndex,$alarmVariable,$alarmSampleType,$alarmValue,$alarmFallingThreshold,$eventURL)
            }
            else
            {
                details($alarmIndex,$alarmVariable,$alarmSampleType,$alarmValue,$alarmFallingThreshold)
            }
            
            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap
            
            update(@Summary)

        case "3": ### packetMatch
        
            ##########
            # The SNMP trap that is generated when a packet is captured by a
            # channel that is configured for sending SNMP traps.
            #
            # $1 = channelIndex - An index that uniquely identifies an entry in
            #        the channel table. Each such entry defines one channel, a
            #        logical data and event stream.
            # $2 = channelMatches - The number of times this channel has
            #        matched a packet. Note that this object is updated even
            #        when channelDataControl is set to off.
            # $3 = channelDescription - A comment describing this channel.
            ##########
            
            $channelIndex = $1
            $channelMatches = $2
            $channelDescription = $3
            details($channelIndex,$channelMatches,$channelDescription)
            
            $OS_EventId = "SNMPTRAP-IETF-RMON-MIB-packetMatch"

            @AlertGroup = "RMON Packet Match"
            @AlertKey = "channelEntry." + $1
            @Summary = "Packet Captured by Channel Matched  ( Channel: " + $3 + " )"
            
            $DEFAULT_Severity = 3
            $DEFAULT_Type = 1
            $DEFAULT_ExpireTime = 0

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            details($*)
    }

##########
# Handle Severity via Lookup.
##########

if(exists($SEV_KEY))
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, IETF-RMON-MIB_sev)
}
else
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, IETF-RMON-MIB_sev)
}
include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"

##########
# End of Severity via Lookup.
##########

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-RMON-MIB.adv.include.snmptrap.rules"
include "$NC_RULES_HOME/include-snmptrap/IETF/IETF-RMON-MIB.user.include.snmptrap.rules"

##########
# End of "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-common/load_include.rules"

log(DEBUG, "<<<<< Leaving... IETF-RMON-MIB.include.snmptrap.rules >>>>>")

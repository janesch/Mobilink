/*------------------------------------------------------------------------------------------------------- 
 Policy Name: ML_BNSI_ProcessingErrorAlarm

 Author: Chris Janes, Innovise 

 Description: This policy processes the Ericsson BNSI QoS alarms.
 This policy is based on ML_INProcessingErrorAlarm authored by Dinesh Kumar
 
 The policy will check for the existence of Synthetic event 
 and updates the current network event as a child event for the synthetic event.
 If a synthetic event is not available, then a new one will be generated.
 Further details of the policies design can be found in BNSI-ProcessingError alarms LLD.dox

 Reviewed By: 
 
 V 0.0  20111117    Chris Janes     Original

------------------------------------------------------------------------------------------------------- 
 Event Reader filter - 
 
------------------------------------------------------------------------------------------------------- */

log("------------Starting ML_INProcessingErrorAlarm for "+ @Serial + " ------------------");


// Set Impact Flag to show we have started
@ImpactFlag = 5;
ReturnEvent(EventContainer);
log("ImpactFlag: " + @ImpactFlag);

// Set Policy local variables
EventKey = @ServerSerial;
ActionKey = EventKey + "#"+ getDate();
sleep_time = 300;

paramSummary=@Summary;
paramType=@Type;
paramNodeAlias=@NodeAlias;
paramLastOcc=@LastOccurrence;
paramSerial=@Serial;
if(@Type==2)
{
    paramSerial=@ProblemSerial;
}


// Hibernate for sleep_time
log("Starting hibernation for: " + ActionKey + " Expire in: " + sleep_time);
@HibernateFlag = 1;
ReturnEvent(EventContainer);
Hibernate(ActionKey, NULL, sleep_time);
log("Deleting Hibernation for = " + ActionKey);
RemoveHibernation(ActionKey);
@HibernateFlag = 2;
ReturnEvent(EventContainer);
// Hibernation Completed

// Check if the event still exists in the ObjectServer
DataSource= "defaultobjectserver";
Query="select Serial from alerts.status where Serial = " + EventKey + " and Severity > 0";
CountOnly = False;
EventFound=DirectSQL(DataSource, Query, CountOnly);
FoundFlag=length(EventFound);


// NE still exists
If(FoundFlag > 0)
{
    log("Event " + EventKey + " still in ObjectServer. Verify if a corresponding synthetic event exists..."); 

    // Is there an associated Synthetic Event
    DataType = "OS_Status";
    SyntheticEventFilter = "NodeAlias = '" + @NodeAlias + "' And EventId = 'SYN_IN_PER_001'";
    SyntheticEvent = GetByFilter(DataType, SyntheticEventFilter, False);
    NumOfSyntheticEvent = Length(SyntheticEvent);

    // There is an assocaited SE
    If(NumOfSyntheticEvent > 0)
    {
        Log("Found an existing Synthetic Event - " + SyntheticEvent[0].ServerSerial);

        // Add the current network event as a child of the existing event via the journal
        TypeText ="PROBLEM";
        if(@Type==2)
        {
            TypeText ="RESOLUTION";
        }
        JournalInsert = "Event Summary: " + @Summary+" :: Event Serial: " + @Serial;        
        Journal_Timestamp = @LastOccurrence;
        if (TypeText !="RESOLUTION") 
        {
            Log("Calling Mobilib.GenericJournal function for " + @Serial);
            SyntheticEventSerial = SyntheticEvent[0].ServerSerial;
            MobiLib.AddGenericJournal(SyntheticEventSerial, paramSummary,paramSerial,paramLastOcc,paramNodeAlias,paramType);
            Log("End of Mobilib.GenericJournal function");
        }

        //Set the @SyntheticServerSerial for the network event equal to the synthetic event @ServerSerial.
        @SyntheticServerSerial=SyntheticEvent[0].ServerSerial;
        @SyntheticServerName = SyntheticEvent[0].ServerName;
        ReturnEvent(EventContainer);

        //Update the severity of the synthetic event based on the severity of the most recently added network event.
        DataSource= "defaultobjectserver";
        Query="Update alerts.status SET  Severity = " + @Severity + " WHERE ServerSerial = " + SyntheticEvent[0].ServerSerial;
        CountOnly = False;
        DirectSQL(DataSource, Query, CountOnly);
    }
    else
    // No Associated Synthetic Event
    {
        Log("No Synthetic Event found, creating a new one");
        NewSyntheticEvent = NewEvent("ML_DefaultEventReader");
        NewSyntheticEvent.Node = @Node;
        NewSyntheticEvent.NodeAlias = @NodeAlias;
        NewSyntheticEvent.Summary = "IN SA Processing errors";
        NewSyntheticEvent.AlertGroup = @AlertGroup;
        NewSyntheticEvent.Agent = "Netcool Impact";
        NewSyntheticEvent.Manager = "Netcool Impact";
        NewSyntheticEvent.Severity = 5;
        NewSyntheticEvent.Type = 1;
        NewSyntheticEvent.LogTicket = 1;
        NewSyntheticEvent.ImpactFlag = 6;
        NewSyntheticEvent.MaintFlag = @MaintFlag;
        NewSyntheticEvent.EventId = "SYN_IN_PER_001";
        NewSyntheticEvent.Class = 200041;
        NewSyntheticEvent.Site = @Site;
        NewSyntheticEvent.SiteCode = @SiteCode;
        NewSyntheticEvent.Identifier = Node + Summary + Type + EventId + @LastOccurrence;
        NewSyntheticEvent.FirstOccurrence = getdate();
        NewSyntheticEvent.LastOccurrence = getdate();
        NewSyntheticEvent.Domain = @Domain;
        NewSyntheticEvent.Region = @Region;
        NewSyntheticEvent.ManCity = @ManCity;
        NewSyntheticEvent.CovCity = @CovCity;
        NewSyntheticEvent.OutsourceContractor = @OutsourceContractor;
        NewSyntheticEvent.BusImportance = @BusImportance;
        NewSyntheticEvent.Vendor = @Vendor;
        NewSyntheticEvent.BSC_Name = @BSC_Name;
        NewSyntheticEvent.BTS_Name = @BTS_Name;
        NewSyntheticEvent.AdvCorrServerSerial = @Serial;
        NewSyntheticEvent.OmcEms = @OmcEms;

        //ReturnEvent(NewSyntheticEvent);
        AddDataItem('OS_Status', NewSyntheticEvent );

        //Populate @SyntheticServerSerial of the network event with serial of the new synthetic event.    
        // Get the details of the Synthetic Event
        DataType = "OS_Status";
        SyntheticEventFilter = "NodeAlias = '" + @NodeAlias + "' And EventId = 'SYN_IN_PER_001'";
        SyntheticEvent = GetByFilter(DataType, SyntheticEventFilter, False);
        NumOfSyntheticEvent = Length(SyntheticEvent);
        log("NumOfSyntheticEvent  = " + NumOfSyntheticEvent );
        
        // Found associated Synthetic Event
        If(NumOfSyntheticEvent > 0)
        {
            // Update Network Event with Synthetic event details
            log("NewSyntheticEvent[0].ServerSerial = " + SyntheticEvent[0].ServerSerial );
            @SyntheticServerSerial=SyntheticEvent[0].ServerSerial;
            @SyntheticServerName = SyntheticEvent[0].ServerName;
            ReturnEvent(EventContainer);

            // Add the current network event as a child of the existing event via the journal
            SyntheticEventSerial = SyntheticEvent[0].ServerSerial;
            MobiLib.AddGenericJournal(SyntheticEventSerial, paramSummary,paramSerial,paramLastOcc,paramNodeAlias,paramType);
        }
    }
}
else
{
    log("Event " + EventKey + " is NOT in ObjectServer anymore (or it was cleared)"); 
}

// Mark the end of event processing 
@ImpactFlag = 6;
ReturnEvent(EventContainer);
log("ImpactFlag: " + @ImpactFlag);
log("------------Stopping ML_INProcessingErrorAlarm for " + @Serial + " ------------------");
 
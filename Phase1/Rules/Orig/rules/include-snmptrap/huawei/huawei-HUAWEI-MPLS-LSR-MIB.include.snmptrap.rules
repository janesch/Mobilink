###############################################################################
#
#    Licensed Materials - Property of IBM
#    5724-O48
#
#    (C) Copyright IBM Corp. 2007
#    All Rights Reserved
#
#    US Government Users Restricted Rights - Use, duplication or
#    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#    huawei-HUAWEI-MPLS-LSR-MIB.include.snmptrap.rules 3.0
#    2007/05/07 Gerry van der Zanden
#
###############################################################################
#
# 3.0 - Updated release for NIM-03
#
#          -  Supports "Advanced" and "User" include files
#          -  Supports "Severity" lookup tables
#
###############################################################################
#
# 2.0 - Updated release
#
#          -  Repackage for NIM-02
#          -  HUAWEI-MPLS-LSR-MIB release V1.0
#
###############################################################################
#
# 1.0 - Initial Release.
#
#        Compatible with:
#
#          -  Netcool/OMNIbus 3.6 and 7.x
#          -  Netcool Rules File Standards (MUSE-STD-RF-02, July 2002)
#          -  HUAWEI-MPLS-LSR-MIB release V1.0
#
###############################################################################

case ".1.3.6.1.4.1.2011.5.12.1.2": ### Huawei - Notifications from HUAWEI-MPLS-LSR-MIB

    log(DEBUG, "<<<<< Entering... huawei-HUAWEI-MPLS-LSR-MIB.include.snmptrap.rules >>>>>")

    @Agent = "Huawei AR- and S-Series"
    @Class = "40579"

    $OPTION_TypeFieldUsage = "3.6"

    switch($specific-trap)
    {
        case "1": ### mplsXCUp

            ##########
            # This notification is generated when a mplsXCOperStatus object for
            # one of the configured cross-connect entries is about to leave the
            # down state and transition into some other state (but not into the
            # notPresent state). This other state is indicated by the
            # included value of mplsXCOperStatus.
            #
            # $1 = mplsXCIndex - Primary index for the conceptual row
            #        identifying a group of cross-connect segments.
            # $2 = mplsInSegmentIfIndex - This is a unique index for an entry in
            #        the MplsInSegmentTable. This value represents the interface
            #        index for the incoming MPLS interface. A value of zero
            #        represents an incoming label from the per-platform label space.
            #        In this case, the mplsInSegmentLabel is interpreted to be
            #        an MPLS-type label.
            # $3 = mplsInSegmentLabel - The incoming label for this segment.
            # $4 = mplsOutSegmentIndex - This value contains a unique index for
            #        this row. While a value of 0 is not valid as an index for this
            #        row it can be supplied as a valid value to index mplsXCTable
            #        to access entries for which no out-segment has been configured.
            # $5 = mplsXCAdminStatus - The desired operational status of this segment.
            # $6 = mplsXCOperStatus - The actual operational status of this
            #        cross-connect.
            ##########

            $mplsXCIndex = $1
            $mplsInSegmentIfIndex = $2
            $mplsInSegmentLabel = $3
            $mplsOutSegmentIndex = $4
            $mplsXCAdminStatus = lookup($5,MplsXCAdminStatus) + " ( " + $5 + " )"
            $mplsXCOperStatus = lookup($6,MplsXCOperStatus) + " ( " + $6 + " )"
            details($mplsXCIndex,$mplsInSegmentIfIndex,
                    $mplsInSegmentLabel,$mplsOutSegmentIndex,
                    $mplsXCAdminStatus,$mplsXCOperStatus)

            $OS_EventId = "SNMPTRAP-huawei-HUAWEI-MPLS-LSR-MIB-mplsXCUp"

            @AlertGroup = "MPLS XC Status"
            @AlertKey = "mplsXCEntry." + $mplsXCIndex + "." + $mplsInSegmentIfIndex + "." + $mplsInSegmentLabel + "." + $mplsOutSegmentIndex
            @Summary = "MPLS Cross-Connect Up  ( " + @AlertKey + " )"

            $DEFAULT_Severity = 1
            $DEFAULT_Type = 2
            $DEFAULT_ExpireTime = 0

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        case "2": ### mplsXCDown

            ##########
            # This notification is generated when a mplsXCOperStatus object for
            # one of the configured cross-connect entries is about to enter the
            # down state from some other state (but not from the notPresent
            # state). This other state is indicated by the included value of
            # mplsXCOperStatus.
            #
            # $1 = mplsXCIndex - Primary index for the conceptual row
            #        identifying a group of cross-connect segments.
            # $2 = mplsInSegmentIfIndex - This is a unique index for an entry in
            #        the MplsInSegmentTable. This value represents the interface
            #        index for the incoming MPLS interface. A value of zero
            #        represents an incoming label from the per-platform label space.
            #        In this case, the mplsInSegmentLabel is interpreted to be
            #        an MPLS-type label.
            # $3 = mplsInSegmentLabel - The incoming label for this segment.
            # $4 = mplsOutSegmentIndex - This value contains a unique index for
            #        this row. While a value of 0 is not valid as an index for this
            #        row it can be supplied as a valid value to index mplsXCTable
            #        to access entries for which no out-segment has been configured.
            # $5 = mplsXCAdminStatus - The desired operational status of this segment.
            # $6 = mplsXCOperStatus - The actual operational status of this
            #        cross-connect.
            ##########

            $mplsXCIndex = $1
            $mplsInSegmentIfIndex = $2
            $mplsInSegmentLabel = $3
            $mplsOutSegmentIndex = $4
            $mplsXCAdminStatus = lookup($5,MplsXCAdminStatus) + " ( " + $5 + " )"
            $mplsXCOperStatus = lookup($6,MplsXCOperStatus) + " ( " + $6 + " )"
            details($mplsXCIndex,$mplsInSegmentIfIndex,
                    $mplsInSegmentLabel,$mplsOutSegmentIndex,
                    $mplsXCAdminStatus,$mplsXCOperStatus)

            $OS_EventId = "SNMPTRAP-huawei-HUAWEI-MPLS-LSR-MIB-mplsXCDown"

            @AlertGroup = "MPLS XC Status"
            @AlertKey = "mplsXCEntry." + $mplsXCIndex + "." + $mplsInSegmentIfIndex + "." + $mplsInSegmentLabel + "." + $mplsOutSegmentIndex 
            @Summary = "MPLS Cross-Connect Down  ( " + @AlertKey + " )"

            $DEFAULT_Severity = 3
            $DEFAULT_Type = 1
            $DEFAULT_ExpireTime = 0

            @Identifier = @Node + " " + @AlertKey + " " + @AlertGroup + " " + $DEFAULT_Type + " " + @Agent + " " + @Manager + " " + $specific-trap

        default:

            @Summary = "Unknown Specific Trap Number (" + $specific-trap + ") Received for Enterprise " + $enterprise
            @Severity = 1
            @Identifier = @Node + " " + @Agent + " " + @Manager + " " + $enterprise + " " + $generic-trap + " " + $specific-trap
            details($*)
    }

#########
# Handle Severity via Lookup.
##########

if(exists($SEV_KEY))
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($SEV_KEY, huawei-HUAWEI-MPLS-LSR-MIB_sev)
}
else
{
    [$OS_Severity,$OS_Type,$OS_ExpireTime] = lookup($OS_EventId, huawei-HUAWEI-MPLS-LSR-MIB_sev)
}
include "$NC_RULES_HOME/include-common/AssignSev.include.common.rules"

##########
# End of Severity via Lookup.
##########

##########
# Enter "Advanced" and "User" includes.
##########

include "$NC_RULES_HOME/include-snmptrap/huawei/huawei-HUAWEI-MPLS-LSR-MIB.adv.include.snmptrap.rules"
include "$NC_RULES_HOME/include-snmptrap/huawei/huawei-HUAWEI-MPLS-LSR-MIB.user.include.snmptrap.rules"

##########
# End of "Advanced" and "User" includes.
##########

log(DEBUG, "<<<<< Leaving... huawei-HUAWEI-MPLS-LSR-MIB.include.snmptrap.rules >>>>>")
